# -*- coding: utf-8 -*-
"""bancosapp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZftL7qKlkxNAimQTF4tQpmGrIpw7Xx5n
"""

import streamlit as st
import yfinance as yf
import pandas as pd
from PIL import Image
import requests
from io import BytesIO
import time

# Dicion√°rio com dados dos bancos
bancos = {
    'BBDC4.SA': {
        'empresa': 'Banco Bradesco',
        'ticket': 'BBDC4',
        'logo_url': 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/10/Bradesco_logo.svg/2560px-Bradesco_logo.svg.png'
    },
    'BBAS3.SA': {
        'empresa': 'Banco do Brasil',
        'ticket': 'BBAS3',
        'logo_url': 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/Banco_do_Brasil_logo.svg/2560px-Banco_do_Brasil_logo.svg.png'
    },
    'ITUB4.SA': {
        'empresa': 'Ita√∫ Unibanco',
        'ticket': 'ITUB4',
        'logo_url': 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Itau_logo.svg/2560px-Itau_logo.svg.png'
    },
    'SANB11.SA': {
        'empresa': 'Banco Santander',
        'ticket': 'SANB11',
        'logo_url': 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Logo_Banco_Santander.svg/2560px-Logo_Banco_Santander.svg.png'
    }
}

def get_preco_acao(ticker):
    stock = yf.Ticker(ticker)
    info = stock.history(period="1d", interval="1m")
    if not info.empty:
        return round(info["Close"].iloc[-1], 2)
    return "N/A"

st.set_page_config(page_title="Pre√ßos em tempo real - Bancos", layout="wide")
st.title("üìä Pre√ßo em Tempo Real das A√ß√µes - Bancos B3")

refresh_interval = st.slider("‚è±Ô∏è Atualizar a cada quantos segundos?", min_value=5, max_value=60, value=10)

# Mostrar logos e informa√ß√µes fixas
st.subheader("üè¶ Bancos e Informa√ß√µes Fixas")
info_cols = st.columns(len(bancos))
for i, (ticker, info) in enumerate(bancos.items()):
    with info_cols[i]:
        st.image(info['logo_url'], width=80)
        st.markdown(f"**{info['empresa']}**")
        st.markdown(f"üé´ **{info['ticket']}**")

# Espa√ßo reservado para pre√ßos (din√¢mico)
st.subheader("üí∏ Pre√ßos em Tempo Real")
preco_placeholder = st.empty()

# Atualiza√ß√£o cont√≠nua dos pre√ßos (apenas a parte din√¢mica)
while True:
    with preco_placeholder.container():
        cols = st.columns(len(bancos))
        for i, (ticker, info) in enumerate(bancos.items()):
            with cols[i]:
                preco = "N/A"
                try:
                    stock = yf.Ticker(ticker)
                    data = stock.history(period="1d", interval="1m")
                    if not data.empty:
                        preco = round(data["Close"].iloc[-1], 2)
                except:
                    pass
                st.metric(label=f"{info['ticket']}", value=f"R$ {preco}")
    st.caption(f"üîÅ Atualizando novamente em {refresh_interval} segundos...")
    time.sleep(refresh_interval)
