# -*- coding: utf-8 -*-
"""bancosapp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZftL7qKlkxNAimQTF4tQpmGrIpw7Xx5n
"""
pip install -r requirements.txt
import streamlit as st
import yfinance as yf
import pandas as pd
from PIL import Image
import requests
from io import BytesIO
import time
from openai import OpenAI
import os

# configure sua chave
os.environ["OPENAI_API_KEY"] = "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"
client = OpenAI()

# Dicionário com dados dos bancos
bancos = {
    'BBDC4.SA': {
        'empresa': 'Banco Bradesco',
        'ticker': 'BBDC4',
        'logo_path': 'logos/bradesco.png'
    },
    'BBAS3.SA': {
        'empresa': 'Banco do Brasil',
        'ticker': 'BBAS3',
        'logo_path': 'logos/bb.png'
    },
    'ITUB4.SA': {
        'empresa': 'Itaú Unibanco',
        'ticker': 'ITUB4',
        'logo_path': 'logos/itau.png'
    },
    'SANB11.SA': {
        'empresa': 'Banco Santander',
        'ticker': 'SANB11',
        'logo_path': 'logos/santander.png'
    }
}

def buscar_preco(ticker):
    try:
        stock = yf.Ticker(ticker)
        hist = stock.history(period="1d", interval="1m")
        if not hist.empty:
            return round(hist["Close"].iloc[-1], 2)
    except:
        pass
    return "N/A"

# Função para IA analisar o histórico
def analisar_bbdc4_com_openai(df):
    csv_text = df.to_csv(index=True)
    prompt = f"""
Abaixo o histórico do preço de fechamento do BBDC4 nos últimos 5 minutos:
{csv_text}

Faça uma análise muito curta do comportamento e no final diga se vale a pena comprar nos próximos 5 minutos.

No final, escreva apenas uma linha assim:
RECOMENDAÇÃO: SIM
ou
RECOMENDAÇÃO: NÃO
"""
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content

# Função para mostrar histórico
def mostrar_historico_bbdc4():
    st.header("📈 Histórico Banco Bradesco - últimos 5 minutos")
    ticker = 'BBDC4.SA'
    stock = yf.Ticker(ticker)
    hist = stock.history(period="5m", interval="1m")

    if not hist.empty:
        df = hist[['Close']].rename(columns={"Close": "Preço"})
        st.line_chart(df)

        if st.button("🔎 Pedir análise da IA"):
            with st.spinner("IA analisando..."):
                analise = analisar_bbdc4_com_openai(df)
            st.subheader("📊 Análise da IA")
            st.write(analise)
            
            if "RECOMENDAÇÃO: SIM" in analise.upper():
                st.success("✅ RECOMENDAÇÃO FINAL DA IA: SIM")
            elif "RECOMENDAÇÃO: NÃO" in analise.upper():
                st.warning("🚫 RECOMENDAÇÃO FINAL DA IA: NÃO")
            else:
                st.info("ℹ️ IA não deu recomendação clara.")
    else:
        st.write("Sem dados recentes para exibir o histórico.")

st.set_page_config(page_title="Preços em tempo real - Bancos", layout="wide")
st.title("📊 Preço em Tempo Real das Ações - Bancos B3")
refresh_interval = st.slider("⏱️ Atualizar a cada quantos segundos?", min_value=1, max_value=60, value=1)

# Placeholder para atualização da tabela
placeholder = st.empty()

# Dicionário para guardar o último preço conhecido
precos_anteriores = {ticker: None for ticker in bancos.keys()}

while True:
    with placeholder.container():
        # Cabeçalho da tabela
        col1, col2, col3, col4, col5 = st.columns([1.5, 3, 2, 2, 1])
        with col1: st.markdown("**LOGO**")
        with col2: st.markdown("**EMPRESA**")
        with col3: st.markdown("**TICKER**")
        with col4: st.markdown("**PREÇO DA AÇÃO (R$)**")
        with col5: st.markdown("**TENDÊNCIA**")

        for ticker, info in bancos.items():
            preco_atual = buscar_preco(ticker)
            preco_ant = precos_anteriores[ticker]

            # Decide o emoji de tendência
            if preco_ant is None or preco_atual == "N/A" or preco_ant == "N/A":
                tendencia = ""
            elif preco_atual > preco_ant:
                tendencia = "🔺"
            elif preco_atual < preco_ant:
                tendencia = "🔻"
            else:
                tendencia = "-"

            precos_anteriores[ticker] = preco_atual

            col1, col2, col3, col4, col5 = st.columns([1.5, 3, 2, 2, 1])
            with col1:
                st.image(info["logo_path"], width=100)
            with col2:
                st.markdown(f"<div style='display:flex; align-items:center; height:100%;'>{info['empresa']}</div>", unsafe_allow_html=True)
            with col3:
                st.markdown(f"<div style='display:flex; align-items:center; height:100%;'>{info['ticker']}</div>", unsafe_allow_html=True)
            with col4:
                st.markdown(f"<div style='display:flex; align-items:center; height:100%;'>R$ {preco_atual}</div>", unsafe_allow_html=True)
            with col5:
                st.markdown(f"<div style='display:flex; align-items:center; height:100%; font-size:24px;'>{tendencia}</div>", unsafe_allow_html=True)

    time.sleep(refresh_interval)
