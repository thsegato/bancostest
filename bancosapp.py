# -*- coding: utf-8 -*-
"""bancosapp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZftL7qKlkxNAimQTF4tQpmGrIpw7Xx5n
"""

import streamlit as st
import yfinance as yf
import pandas as pd
from PIL import Image
import requests
from io import BytesIO
import time

# Dicion√°rio com dados dos bancos
bancos = {
    'BBDC4.SA': {
        'empresa': 'Banco Bradesco',
        'ticket': 'BBDC4',
        'logo_path': os.path.join(LOGO_PATH, 'bradesco.png')
    },
    'BBAS3.SA': {
        'empresa': 'Banco do Brasil',
        'ticket': 'BBAS3',
        'logo_path': os.path.join(LOGO_PATH, 'bb.png')
    },
    'ITUB4.SA': {
        'empresa': 'Ita√∫ Unibanco',
        'ticket': 'ITUB4',
        'logo_path': os.path.join(LOGO_PATH, 'itau.png')
    },
    'SANB11.SA': {
        'empresa': 'Banco Santander',
        'ticket': 'SANB11',
        'logo_path': os.path.join(LOGO_PATH, 'santander.png')
    }
}

def get_preco_acao(ticker):
    stock = yf.Ticker(ticker)
    info = stock.history(period="1d", interval="1m")
    if not info.empty:
        return round(info["Close"].iloc[-1], 2)
    return "N/A"

st.set_page_config(page_title="Pre√ßos em tempo real - Bancos", layout="wide")
st.title("üìä Pre√ßo em Tempo Real das A√ß√µes - Bancos B3")

refresh_interval = st.slider("‚è±Ô∏è Atualizar a cada quantos segundos?", min_value=5, max_value=60, value=10)

# Atualiza√ß√£o em tempo real
placeholder = st.empty()

while True:
    with placeholder.container():
        cols = st.columns(len(bancos))
        for i, (ticker, info) in enumerate(bancos.items()):
            with cols[i]:
                # Logo
                try:
                    response = requests.get(info["logo_url"])
                    img = Image.open(BytesIO(response.content))
                    st.image(img, width=100)
                except:
                    st.text("Logo n√£o dispon√≠vel")

                st.markdown(f"**{info['empresa']}**")
                st.markdown(f"üé´ **{info['ticket']}**")

                preco = get_preco_acao(ticker)
                st.metric(label="Pre√ßo da A√ß√£o (R$)", value=preco)

    time.sleep(refresh_interval)
